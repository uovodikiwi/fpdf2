import os
from contextlib import suppress
from pathlib import Path

import pytest

from fpdf import FPDF
from test.utilities import assert_pdf_equal

HERE = Path(__file__).resolve().parent


def test_add_font_non_existing_file():
    pdf = FPDF()
    with pytest.raises(FileNotFoundError) as error:
        pdf.add_font("non-existing")
    expected_msg = "[Errno 2] No such file or directory: 'non-existing.pkl'"
    assert str(error.value) == expected_msg


def test_add_font_non_existing_file_unicode():
    pdf = FPDF()
    with pytest.raises(FileNotFoundError) as error:
        pdf.add_font("non-existing", uni=True)
    expected_msg = "TTF Font file not found: non-existing.pkl"
    assert str(error.value) == expected_msg


def test_add_font_unicode_with_path_fname_ok(tmp_path):
    for font_cache_dir in (True, tmp_path):
        pdf = FPDF(font_cache_dir=font_cache_dir)
        font_file_path = HERE / "../end_to_end_legacy/charmap/Roboto-Regular.ttf"
        pdf.add_font("Roboto-Regular", fname=font_file_path, uni=True)
        pdf.set_font("Roboto-Regular", size=64)
        pdf.add_page()
        pdf.cell(pdf.epw, 20, "Hello World!")
        assert_pdf_equal(pdf, HERE / "add_font_unicode.pdf", tmp_path)


def test_add_font_unicode_with_str_fname_ok(tmp_path):
    for font_cache_dir in (True, str(tmp_path)):
        pdf = FPDF(font_cache_dir=font_cache_dir)
        font_file_path = HERE / "../end_to_end_legacy/charmap/Roboto-Regular.ttf"
        pdf.add_font("Roboto-Regular", fname=str(font_file_path), uni=True)
        pdf.set_font("Roboto-Regular", size=64)
        pdf.add_page()
        pdf.cell(pdf.epw, 20, "Hello World!")
        assert_pdf_equal(pdf, HERE / "add_font_unicode.pdf", tmp_path)


def test_add_font_from_pkl(tmp_path):
    pdf = FPDF()
    font_file_path = HERE / "../end_to_end_legacy/charmap/Roboto-Regular.ttf"
    pdf.add_font("Roboto-Regular", fname=font_file_path, uni=True)
    del pdf.fonts["Roboto-Regular"]  # required to be allow to re-add it
    # re-using .pkl file generated by previous method call:
    pdf.add_font("Roboto-Regular")
    pdf.set_font("Roboto-Regular", size=64)
    pdf.add_page()
    pdf.cell(pdf.epw, 20, "Hello World!")
    assert_pdf_equal(pdf, HERE / "add_font_from_pkl.pdf", tmp_path)


def teardown():
    # Clean-up for test_add_font_from_pkl
    with suppress(FileNotFoundError):
        os.remove("Roboto-Regular.pkl")
